/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.


					License Agreement
					For Open Source Computer Vision Library
					(3-clause BSD License)
 Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:

   * Redistribution's of source code must retain the above copyright notice,
     this list of conditions and the following disclaimer.

   * Redistribution's in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution.

   * The name of the copyright holders may not be used to endorse or promote products
     derived from this software without specific prior written permission.

 This software is provided by the copyright holders and contributors "as is" and
 any express or implied warranties, including, but not limited to, the implied
 warranties of merchantability and fitness for a particular purpose are disclaimed.
 In no event shall the Intel Corporation or contributors be liable for any direct,
 indirect, incidental, special, exemplary, or consequential damages
 (including, but not limited to, procurement of substitute goods or services;
 loss of use, data, or profits; or business interruption) however caused
 and on any theory of liability, whether in contract, strict liability,
 or tort (including negligence or otherwise) arising in any way out of
 the use of this software, even if advised of the possibility of such damage.




*/

#include <string>
#include "voronoi_art/image_processing/image_processing.h"
#include "voronoi_art/voronoi_processing/voronoi_processing.h"
#include <boost/program_options.hpp>
#include <iostream>
namespace po = boost::program_options;
using namespace voronoi_art;

int main(int argc, char* argv[]) {
	std::string image_name;
	double float_threshold, float_prob;
	std::string output_image;
	po::options_description desc("Allowed options");
	desc.add_options()("help,h", "produce help message")("input_image,i",
			po::value<string>(&image_name),
			"sets input image. Currently, only .jpg files are supported.")(
			"output_image,o", po::value<string>(&output_image),
			"file to write the output to. If not set, just opens a display window.")
			("gradient_threshold,g",po::value<double>(&float_threshold)->default_value(0.0), "Threshold for the image gradient (0.0 - 1.0 scale). Pixels with a gradient above this value will be selected as site points.")
			("random_threshold,r",po::value<double>(&float_prob)->default_value(0.97),"sets the probability that a pixel will randomly NOT be selected as a site point, regardless of the gradient filter.")(
			"draw_edges,e", "Draw the edges of the voronoi diagram")(
			"draw_cells,c", "Draw the cells of the voronoi diagram")(
			"delaunay,d",
			"Extract and render the Delaunay Triangulation from the voronoi diagram");
	po::variables_map vm;
	po::store(po::parse_command_line(argc, argv, desc), vm);
	po::notify(vm);
	if (vm.count("help") or vm.count("H")) {
		desc.print(std::cout, 25);
		exit(0);
	}
	if (image_name.compare("") == 0) {
		std::cerr << "Input jpg must be specified." << std::endl;
		desc.print(std::cerr, 25);
		exit(-1);
	}
	Mat image;
	image = imread(image_name, IMREAD_UNCHANGED); // Read the file
	if (image.empty())                      // Check for invalid input
	{
		cout << "Could not open or find the image" << std::endl;
		return -1;
	}
	if(!vm.count("draw_edges") and !vm.count("draw_cells")){

		std::cerr << "Must specify either draw_edges (-e) or draw_cells (-c)." << std::endl;
		desc.print(std::cerr, 25);
		exit(-1);
	}
	Size size(600, 600);
	Mat image_resized, sharpenned_image;
	resize(image, image_resized, size);                      //resize image
	voronoi_art::image_processing im_proc;
	sharpenned_image = image_processing::sharpen(image_resized);
	std::vector<cv::Point> cv_points;
	vector<PixelFunctor> filters;
	filters.push_back(im_proc.random_dropout(float_prob));
	filters.push_back(
			im_proc.gradient_threshold(sharpenned_image,
					std::round(255.0 * float_threshold)));
	filters.push_back(
			im_proc.laplacian_threshold(sharpenned_image,
					std::round(255.0 * float_threshold)));

	cv_points = im_proc.filter_intersection(sharpenned_image, filters);
	std::cout << "Extracted " << cv_points.size() << " points." << std::endl;
	std::vector<point_type> site_points(cv_points.size());

	for (const cv::Point& point : cv_points) {
		site_points.push_back(voronoi_processing::cv_point_to_voronoi(point));
	}
	bool delaunay = vm.count("delaunay") > 0;
	const voronoi_processing vp(sharpenned_image, site_points, delaunay);

	std::cout << "VD has " << vp.get_voronoi_diagram()->edges().size()
			<< " edges." << std::endl;

	if (!(!vp.get_delaunay_triangulation())) {
		std::cout << "Delaunay Triangulation has: "
				<< vp.get_delaunay_triangulation()->m_edges.size() << " edges."
				<< std::endl;
	}
	Mat display(image_resized.size(), image_resized.type(), Scalar::all(0));
	Mat input_clone = image_resized.clone();
	//display=input_clone;
	if (vm.count("draw_edges")) {
		vp.draw_edges(display);
	}
	if (vm.count("draw_cells")) {
		vp.draw_cells(display);
	}
	if (!output_image.empty()) {
		if (delaunay && vm.count("draw_edges")) {
			Mat delaunay_display(image_resized.size(), image_resized.type(),
					Scalar::all(0));
			vp.draw_delaunay_edges(delaunay_display);
			cv::imwrite("delaunay_" + output_image, delaunay_display);
		}
		cv::imwrite(output_image, display);
		cv::imwrite("resized_" + image_name, sharpenned_image);
	} else {
		if (delaunay && vm.count("draw_edges")) {
			Mat delaunay_display(image_resized.size(), image_resized.type(),
					Scalar::all(0));
			vp.draw_delaunay_edges(delaunay_display);
			namedWindow("Delaunay Art", WINDOW_AUTOSIZE);
			imshow("Delaunay Art", delaunay_display);
		}
		namedWindow("Voronoi Art", WINDOW_AUTOSIZE);
		imshow("Voronoi Art", display);
		namedWindow("Input Image", WINDOW_AUTOSIZE);
		imshow("Input Image", sharpenned_image);
		waitKey(0);
	}
	return 0;
}
