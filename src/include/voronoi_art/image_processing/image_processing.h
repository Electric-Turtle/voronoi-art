/*

			 Boost Software License - Version 1.0 - August 17th, 2003

			Permission is hereby granted, free of charge, to any person or organization
			obtaining a copy of the software and accompanying documentation covered by
			this license (the "Software") to use, reproduce, display, distribute,
			execute, and transmit the Software, and to prepare derivative works of the
			Software, and to permit third-parties to whom the Software is furnished to
			do so, all subject to the following:

			The copyright notices in the Software and this entire statement, including
			the above license grant, this restriction and the following disclaimer,
			must be included in all copies of the Software, in whole or in part, and
			all derivative works of the Software, unless such copies or derivative
			works are solely in the form of machine-executable object code generated by
			a source language processor.

			THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
			IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
			FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
			SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
			FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
			ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
			DEALINGS IN THE SOFTWARE.


					License Agreement
					For Open Source Computer Vision Library
					(3-clause BSD License)
 Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:

   * Redistribution's of source code must retain the above copyright notice,
     this list of conditions and the following disclaimer.

   * Redistribution's in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution.

   * The name of the copyright holders may not be used to endorse or promote products
     derived from this software without specific prior written permission.

 This software is provided by the copyright holders and contributors "as is" and
 any express or implied warranties, including, but not limited to, the implied
 warranties of merchantability and fitness for a particular purpose are disclaimed.
 In no event shall the Intel Corporation or contributors be liable for any direct,
 indirect, incidental, special, exemplary, or consequential damages
 (including, but not limited to, procurement of substitute goods or services;
 loss of use, data, or profits; or business interruption) however caused
 and on any theory of liability, whether in contract, strict liability,
 or tort (including negligence or otherwise) arising in any way out of
 the use of this software, even if advised of the possibility of such damage.
        Created on: Nov 22, 2017
 *      Author: Trent Weiss
 */

#ifndef INCLUDE_IMAGE_PROCESSING_H_
#define INCLUDE_IMAGE_PROCESSING_H_

#include <boost/random/mersenne_twister.hpp>
#include <boost/random/uniform_real_distribution.hpp>
#include "voronoi_art/image_processing/pixel.h"
#define IMAGE_TYPE CV_8U

using namespace cv;
using namespace std;
#ifdef USE_STD_FUNCTION
#include <functional>
typedef function<bool (const Mat& mat, const unsigned int& r, const unsigned int& c)> PixelFunctor;

#else
#include <boost/function.hpp>
typedef boost::function<bool (const Mat& mat, const unsigned int& r, const unsigned int& c)> PixelFunctor;

#endif
namespace voronoi_art {
//struct Pixel{
//
//	cv::Point point_;
//	Scalar color_;
//};
class image_processing {
	boost::random::mt19937 gen;
	boost::random::uniform_real_distribution<float> dist;
	bool random_threshold(const Mat& mat, const unsigned int& r, const unsigned int& c, const float& threshold);
public:
	image_processing();
	virtual ~image_processing();

	string type2str(int type);
	static Mat sharpen(const Mat& image);
	static Mat image_gradient(const Mat& image);
	static Mat image_laplacian(const Mat& image);
	static vector<Pixel> image_to_point_vector(const Mat& image);
	static vector<Point> filter_intersection(const Mat& input, const vector<PixelFunctor>& filters);
	static vector<Point> filter_union(const Mat& input, const vector<PixelFunctor>& filters);
	static PixelFunctor pixel_gt(const Mat& input, const unsigned int& threshold);
	static PixelFunctor pixel_lt(const Mat& input, const unsigned int& threshold);
	static PixelFunctor gradient_threshold(const Mat& input, const unsigned int& threshold);
	static PixelFunctor laplacian_threshold(const Mat& input, const unsigned int& threshold);
	PixelFunctor random_dropout(const float& dropout_prob);
};

} /* namespace voronoi_art */

#endif /* INCLUDE_IMAGE_PROCESSING_H_ */
