/*
							License Agreement
 Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.


					License Agreement
					For Open Source Computer Vision Library
					(3-clause BSD License)
 Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:

   * Redistribution's of source code must retain the above copyright notice,
     this list of conditions and the following disclaimer.

   * Redistribution's in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution.

   * The name of the copyright holders may not be used to endorse or promote products
     derived from this software without specific prior written permission.

 This software is provided by the copyright holders and contributors "as is" and
 any express or implied warranties, including, but not limited to, the implied
 warranties of merchantability and fitness for a particular purpose are disclaimed.
 In no event shall the Intel Corporation or contributors be liable for any direct,
 indirect, incidental, special, exemplary, or consequential damages
 (including, but not limited to, procurement of substitute goods or services;
 loss of use, data, or profits; or business interruption) however caused
 and on any theory of liability, whether in contract, strict liability,
 or tort (including negligence or otherwise) arising in any way out of
 the use of this software, even if advised of the possibility of such damage.
 Created on: Nov 22, 2017
       Author: Trent Weiss
 */

#ifndef INCLUDE_VORONOI_PROCESSING_H_
#define INCLUDE_VORONOI_PROCESSING_H_
#include <opencv/cv.hpp>
#include <boost/polygon/voronoi.hpp>
#include <boost/graph/graph_traits.hpp>
#include <boost/graph/edge_list.hpp>
#include <boost/graph/adjacency_list.hpp>
#include "voronoi_art/image_processing/pixel.h"
#include <memory>
namespace voronoi_art {
using namespace std;
using namespace cv;
using namespace boost::polygon;

typedef voronoi_diagram<double> VD;
typedef double coordinate_type;
typedef point_data<coordinate_type> point_type;
class voronoi_processing {

public:
	typedef boost::adjacency_list<boost::listS, boost::vecS, boost::undirectedS, point_type, Scalar > delaunay_triangulation;
	//Some typedefs for simplicity
	typedef boost::graph_traits<delaunay_triangulation>::vertex_descriptor delaunay_vertex;
	typedef boost::graph_traits<delaunay_triangulation>::edge_descriptor delaunay_edge;
	typedef  std::shared_ptr<delaunay_triangulation> delaunay_triangulation_ptr;
	voronoi_processing(const Mat& input_image,
			const std::vector<point_type>& site_points, bool extract_delaunay=false);
	virtual ~voronoi_processing();

	void draw_edges(Mat& out_image) const;
	void draw_cells(Mat& image) const;



	void draw_delaunay_edges(Mat& image) const;
	void draw_delaunay_cells(Mat& image) const;

	static cv_float_point voronoi_vertex_to_cv_point(const VD::vertex_type* vertex);
	static point_type cv_point_to_voronoi(const cv_float_point& pt);
	static vector<cv_float_point> voronoi_cell_to_cv_float_polygon(const VD::cell_type cell);
	static vector<cv_int_point> voronoi_cell_to_cv_int_polygon(const VD::cell_type cell);


	std::shared_ptr<const voronoi_art::VD> get_voronoi_diagram() const;
	const std::vector<point_type>& get_site_points() const;
	delaunay_triangulation_ptr get_delaunay_triangulation() const;

protected:
	void add_delaunay_half_segments(VD::const_cell_iterator& it);
	void extract_delaunay_triangulation();
	virtual void draw_edge(const voronoi_art::VD::edge_type& edge, Mat& image) const;
	virtual void draw_cell(voronoi_art::VD::const_cell_iterator& cell, vector<Pixel>& pixels_copy, Mat& image) const;

	delaunay_triangulation_ptr delaunay_triangulation_;
	std::shared_ptr<voronoi_art::VD> vd_;
	std::vector<point_type> site_points_;
	std::vector<Pixel> input_image_pixels_;
	std::map<unsigned int, std::vector<Pixel> > cell_map_;
	Mat input_image_;
};

} /* namespace voronoi_art */

#endif /* INCLUDE_VORONOI_PROCESSING_H_ */
